#email messages
email.subject=Your Account has been registered with NVIDIA
email.message=Your account has been provisioned on NVIDIA
email.message.success=Registration is Successful. Check your email for setting new password
email.already.exists=Customer with this email already exists
email.accept=This email is acceptable

#registration messages
registration.failed=Registration failed. Contact Administrator

#entitlement messages
entitlment.valid=Entitlement key is validated
entitlment.notfound=Registration failed
entitlment.required=Registration requires the Entitlement key, Contact administrator
entitlement.name.saved=  Entitlement saved successfully
entitlement.retrieved=All Entitlements are retrieved
entitlement.operation.notallowed = This operation can not be allowed 
entitlement.entitlementnames= Listed all Entitlement names 
entitlement.name.notnull = Entitlement name should not be null, should not contain space and should be between 4 to 50 characters
entitlement.retrived= Entitlement details retrieved
entitlement.not.present= Entitlement not present


#dashboard messages
dashaboard.operation.notallowed = This operation not allowed

#customer messages
customers.retrived=All customers are retrieved
customer.deleted.success=Customer Deleted Successfully
customer.delete.notfound=Customer Not Found
customer.operation.notallowed = This operation can not be allowed
loggedincustomer.not.delete = Can not delete logged in customer
customer.id.notnull = Customer ID should be numeric and should not be null

#Login messages
user.validate.success=User is validated
login.failed=Invalid email/password
user.inactive=Inactive user
reset.message.success=Your password has been reset. Use the link in the email you received to complete this process
key.not.null = Key should not be null

#quay messages
quay.failed=Registration failed. Contact administrator

#graphana messages
graphana.failed=Registration failed. Contact administrator
node.graphana.details.customerid.nodename=Get list of graph frames for given customer ID, cluster ID and node Name
cluster.graphana.details=Get grafana login details for the loggedin customer
cluster.graphana.customerid.clusterid=Get list of graph frames for given customer ID and cluster ID

#reset messages
reset.email.subject=Reset Password with NVIDIA 
reset.forbidden=Forbidden to sent an forgot password email
reset.success=Password set successfully
reset.key.notnull=key should not be null
reset.user.exists=User already exists

#Appliance
appliance.operation = This Operation Cannot Be Allowed 
appliance.name.saved = Appliance Saved Successfully
appliance.retrieved = All Appliances Are Retrieved

#DashBoard
dashboard.details = Dashboard Details

#User
user.saved.name= User saved successfully
users.all.retrived=All Users Are Retrieved
user.retrived=User Retrieved
user.password.success=Password updated successfully
user.password.incorrect=Enter correct current password
user.deleted.success=User Deleted Successfully
user.not.found=User Not Found
user.operation.notallowed = This Operation Cannot Be Allowed
loggedinuser.not.delete = Can not delete logged in user
customeradmin.not.delete = This user can not be deleted as user since it is a customer admin too. So delete it from customer delete
error.password.encode = Error while encoding password
user.id.notnull=User ID should be numeric and should not be null
user.updated.name= User updated successfully
user.id.notvalid = Invalid user
user.password.validate = User validated successfully

#Cluster
cluster.nfs.updated= Updated successfully
cluster.all.details= All Cluster Details
cluster.notfound.clusterid=No Clusters Found For Given ClusterId
cluster.found.for.clustername=Cluster Found For Given Cluster
cluster.notfound.for.clustername=Cluster Not Found For Given Cluster
cluster.not.found=Cluster Not Found
node.cluster.notfound=Node and cluster details not found
listofnode.by.cluster=All Nodes found by cluster

#Eula
eula.exist = EULA Already Present
eula.uploaded = EULA uploaded
eula.not.uploaded = EULA Not Uploaded

#Validation 
user.username.notempty=User name should not be null
user.password.notempty=Password should not be null
user.username.length=User name should be between 4 and 30 characters
user.password.length=Password should have minimum 8 and maximum 64 characters
user.uid.notempty = UID should not be null
user.uid.length = UID should not have more than 6 digits
user.gid.notempty = GID should not be null
user.gid.length = GID should not have more than 6 digits
user.uid.value = UID should not have value less than or equals to zero
user.gid.value = GID should not have value less than or equals to zero
user.oldpassword.length=Old password should have minimum 8 and maximum 64 characters
user.oldpassword.notempty = Old password should not be null
user.id.notempty = User id should not be null
user.validate=User has been validated successfully
docker.repository.notempty = Repository should not be null
docker.repository.length = Repository Name is limited to 32 characters
eula.name.notempty = Please Select EULA Name
eula.file.notenpty = Please Select File
eula.name.properly = Give Proper EULA Name
key.not.empty = Key should not be empty
user.name.notempty=Name should not be null
user.name.length = Name should have 64 characters
node.cluster.empty=Node or cluster should not be null
cluster.notempty=Cluster and host name should not be null
node.all.details = All Node Details
cluster.clusterid.notfound = cluster not present on id
job.api.notnull=job api type should not be null
input.invalid=Entered value should be a integer
nodename.clusterid.notnull=Nodename OR clusterid should not be null
nodename.clusterName.notnull=Nodename OR clustername should not be null
customer.id.invalid=Invalid Customer OR User Id
not.authorized=Not Authorized
job.marathon.containerport=ContainerPort range should be between  1024 and 65535
job.marathon.hostport=HostPort range should be between  1024 and 65535
job.chronos.containerport=ContainerPort range should be between  1024 and 65535
job.chronos.hostport=HostPort range should be between  1024 and 65535
key.not.allowed = User word not allowed
user.uid.numeric=UID should not be null, should be numeric and should not have value less than or equal to zero
user.gid.numeric=GID should not be null, should be numeric and should not have value less than or equal to zero
spaceparameter.validation=Spaceparameter shold not be null and empty
spaceparameterlength.chronos.validation=Command length is limited to 256 characters
spaceparameterlength.marthon.validation=Space Separated Parameters length is limited to 256 characters
job.containerport.notnumeric=containerport  should allow only numeric values
job.hostport.notnumeric=hostport should  allow only numeric values
job.name.notallow.space =  Job name should not allow space inside string
user.name.notallow.space= User name should not allow space

#Jobs
job.delete.operation.notallowed = Unauthorized operation
job.id.empty = Job id should not be empty
job.save.operation.notallowed = Unauthorized operation
job.notauthorized = Quay OAuth token not found for user
job.dockerimage.retreved = Docker images are retrieved
job.dockerrepository.retreved = Docker repositores are retrieved
job.delete.operation.notallowed.on.customer = Unauthorized operation
docker.repository.deleted = Docker repository deleted successfully
repository.name.notallow.space = Repository name should not allow space

#Node
node.created=Node successfully created
cluster.node.update=Cluster and Node successfully updated
cluster.node.create=Cluster and Node successfully created
node.details=Node details found given by node and cluster
node.details.notfound.bynodeandcluster=Node details not found given by node and cluster
node.details.found=Node details found given by node
node.details.notfound=Node details not found given by node
cluster.upgrade=Updated successfully


#Logincontroller
user.loggedin.success = User {} logged in successfully
user.login.failure = User {} failed to login
user.login.failed.maxattempts = "User {} reached {} wrong attempts. Try after {} minutes"
user.login.inactive = User {} is inactive state
user.login.invalid = User {} is not invalid
user.login.found = User {} is not found
user.login.failed.notAuthorized = User {} is not authorized with this role {}

user.passwd.reset.maxcount = User {} exceeds maximum allowed {} times of password resets in a day.
User.passwd.reset.success = User {} password reset successfully. An email sent to register email-id {}.
User.passwd.reset.failure = User {} password reset failed.
User.passwd.reset.notFound = User password reset failed. Input email id {} invalid.
User.passwd.reset.NotAuthorized = User {} role is superAdmin and can not reset password. 
user.passwd.updated.success = User {} successfully updated his password.
user.passwd.updated.failure = User {} failed to update his password.
user.passwd.updateFailure.incorrectpasswd = User {} failed to update his password. Enter correct old password.
user.passwd.validate.success = User {} successfully validated his password.
user.passwd.validateFailure.incorrectpasswd = User {} password validation failed.

user.passwd.update.failure.superadmin = User {} Roles readers and writers are defined by super admin under nvidia org.
user.passwd.update.failure.customeradmin = User {} Role are defined by customer admin under own org.
user.passwd.update.failure.readrole = User {} assigned customer admin to readers role by super admin under nvidia org.
user.passwd.update.failure.writerole = User {} assigned customer user to writers role by customer admin under org.

job.repository.create.sucess = User {} created repository successfully with parameters customer {} and URL {}
job.repository.delete.sucess = User {} deleted repository {} successfully
job.delete.sucess = User {} deleted job on node {}
job.launch.sucess = User {} launched Job successfully on node {}
job.launch.failed = User {} failed to launch Job on node {} with error {}
job.tomcat.failed = tomcat on IP address {} failed to connect with quay server {}
job.finished = User {} finished Job {} on node {}

user.create.success = User {} created successfully under customer {}
user.update.success = User {} updated successfully under customer {}
user.delete.success = User {} deleted successfully under customer {}
User.updateprofile.success = User {} updated successfully under customer {}

cluster.upgrade.yes = node {} with serial number {} successfully set to upgrade on boot under cluster {}
cluster.upgrade.no = node {} with serial number {} successfully set to not to upgrade on boot under cluster {}
cluster.upgrade.failure = node {} with serial number {} failed upgrade/reboot under cluster {}
node.connect.success = Node {} with serial number {} connected.
node.connect.failure = Node {} with serial number {} disconnected. Please contact administrator.
node.connect.notauthorized =  User {} not authorized to connect with Node {} with serial number {}

node.create.success = Node {} with serial number {} created successfully under cluster {}
nodeAndCluster.create.success = New cluster {} and Node {} with serial number {} created successfully.
node.update.success = Node {} with serial number {} updated successfully under cluster {}

websocket.server.unreachable = Unable to connect with web socket server with URL {}. Please contact administrator.
quay.unreachable = Unable to interact with Quay server {}. Please contact administrator.
graphana.unreachable = Unable to interact with graphana server {}. Please contact administrator.

bad.request = Bad request